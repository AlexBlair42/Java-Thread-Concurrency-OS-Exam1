import java.util.HashMap;
import java.util.Vector;
import java.lang.Thread;
import java.util.Random;

/**
 * Exam 1 Multithreaded Factorial Calculator
 * 
 * @author Alex Blair
 * @version 1.0.0
 *
 */
// The number of threads will be 500. 1 for each 200 numbers. 100,000 total from
// 1 to 10,000
public class Main extends Thread implements Runnable {

	Random rand = new Random();
	// Set the random seed
	int threadnum = 0;
	int vecVal;
	// Create variables for values and the key for the Map.
	int n;
	// n is the key for the map
	int num = rand.nextInt(10000) + 1;
	// num is the random number initialization within the range 1 to 10,000.
	private static final int max = 500;
	// Max is the max number of calculations

	Vector<Integer> facvec = new Vector<Integer>();
	// Set up the Vector for the results

	HashMap<Integer, Vector<Integer>> Map = new HashMap<Integer, Vector<Integer>>();
	// Create the Hashmap for the vector of calculated factors

	{
		
		// If the number of threads executing is less than the max create and start
		// a new thread.
		// the max is 100,000/200 = 500.
		do {
			Thread t = new Thread();
			t.start();
		} while (threadnum < max);

		// Print out the values within the map.
		System.out.printf("%d", Map.containsKey(n));

	}

	public void run() {
		

		// While num does not equal the numbers already indexed within the map
		// save that number
		// mod it by itself
		// if that result is 0 then take 
		do {

			int x = num;
			int modnum = x;
			int result = x % modnum;
			if (result == 0) {
				facvec.add(modnum);
				Map.put(n, facvec);
				modnum--;
			} else {
				modnum--;
			}

		} while (n != num);

	}

	public static void main(String[] args) {
		Main m = new Main();

	}

}
